openapi: 3.0.2
info:
  title: ブログ
  description: |
    ブログの API
  version: 1.0.0
  termsOfService: https://example.com/terms/
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://dev.example.com/v1
    description: Development server
  - url: https://stg.example.com/v1
    description: Staging server
  - url: https://api.example.com/v1
    description: Production server
tags:
  - name: blog
    description: ブログ
    externalDocs:
      description: Find out more
      url: https://example.com
paths:
  /posts:
    post:
      tags:
        - blog
      summary: ブログの投稿
      description: ''
      operationId: addPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Post'
              required:
                - slug
                - title
                - article
      responses:
        '200':
          description: 新規投稿完了
        '405':
          description: 不正な投稿です
      security:
        - blog_auth:
            - 'write:posts'
            - 'read:posts'
    put:
      tags:
        - blog
      summary: ブログの内容変更
      description: ''
      operationId: updatePost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Post'
              required:
                - slug
      responses:
        '200':
          description: 投稿編集完了
        '400':
          description: 正しくないslugが送信された
        '404':
          description: 編集対象の投稿が見つからなかった
      security:
        - blog_auth:
            - 'write:posts'
            - 'read:posts'
  /posts/{slug}:
    get:
      tags:
        - blog
      summary: ブログの投稿取得
      description: ''
      operationId: getPost
      parameters:
        - in: path
          name: slug
          required: true
          description: 取得対象の投稿slug。
          schema:
            $ref: '#/components/schemas/slug'
      responses:
        '200':
          description: ok
    delete:
      tags:
        - blog
      summary: ブログの投稿削除
      description: ''
      operationId: deletePost
      parameters:
        - in: path
          name: slug
          required: true
          description: 削除対象の投稿slug。
          schema:
            $ref: '#/components/schemas/slug'
      responses:
        '200':
          description: 投稿削除完了
        '400':
          description: 正しくないslugが送信された
        '404':
          description: 削除対象の投稿が見つからなかった
      security:
        - blog_auth:
            - 'write:posts'
            - 'read:posts'
components:
  schemas:
    title:
      type: string
      description: ブログのタイトル。
      example: タイトル
    slug:
      type: string
      description: ユニークなキー。URLに使用されます。
      example: hello-world
    article:
      type: string
      description: ブログの記事。記事はマークダウンで記述されます。
      example: |-
        ## markdown
        記事はマークダウンで記述されます
    Post:
      type: object
      properties:
        slug:
          $ref: '#/components/schemas/slug'
        title:
          $ref: '#/components/schemas/title'
        article:
          $ref: '#/components/schemas/article'
externalDocs:
  description: Find out more
  url: http://example.com
